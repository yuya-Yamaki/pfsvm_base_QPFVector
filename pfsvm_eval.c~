#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "svm.h"
#include "pfsvm.h"
struct svm_model *model;
struct svm_node *x;

int main(int argc, char **argv)
{
    IMAGE *org, *dec, *cls;
    int i, j, k, n, label, success;
    int num_class;
    double th_list[MAX_CLASS/2], fvector[NUM_FEATURES], gain = 1.0;
    double offset[MAX_CLASS], cls_hist[MAX_CLASS];
    double sn_before, sn_after;
    static int hevc_qp = 32;
    static char *orgimg = NULL, *decimg = NULL, *modelfile = NULL, *modimg = NULL;

    for (i = 1; i < argc; i++) {
	if (argv[i][0] == '-') {
	    switch (argv[i][1]) {
	    case 'Q':
		hevc_qp = atoi(argv[++i]);
		break;
	    default:
		fprintf(stderr, "Unknown option: %s!\n", argv[i]);
                exit (1);
	    }
	} else {
	    if (orgimg == NULL) {
                orgimg = argv[i];
	    } else if (decimg == NULL) {
                decimg = argv[i];
	    } else if (modelfile == NULL) {
                modelfile = argv[i];
	    } else {
		modimg = argv[i];
	    }
	}
    }
    if (modimg == NULL) {
	printf("Usage: %s [option] original.pgm decoded.pgm model.svm modified.pgm\n",
	       argv[0]);
	printf("    -Q num  QP used in HEVC [%d]\n", hevc_qp);
	exit(0);
    }
    org = read_pgm(orgimg);
    dec = read_pgm(decimg);
    cls = alloc_image(org->width, org->height, 255);
    if((model = svm_load_model(modelfile)) == 0) {
	fprintf(stderr,"can't open model file %s\n", modelfile);
	exit(1);
    }
    num_class = model->nr_class;
    set_thresholds(org, dec, num_class, th_list);
    printf("PSNR = %.2f (dB)\n", sn_before = calc_snr(org, dec));
    printf("# of classes = %d\n", num_class);
    printf("Thresholds = {%.1f", th_list[0]);
    for (k = 1; k < num_class / 2; k++) {
	printf(", %.1f", th_list[k]);
    }
    printf("}\n");
    printf("Gain factor = %f\n", gain);
    x = Malloc(struct svm_node, NUM_FEATURES + 1);
    success = 0;
    for (k = 0; k < num_class; k++) {
	offset[k] = 0.0;
	cls_hist[k] = 0;
    }

    for (i = 0; i < dec->height; i++) {
	for (j = 0; j < dec->width; j++) {
	    get_fvector(dec, i, j, gain, fvector);
	    n = 0;
	    for (k = 0; k < NUM_FEATURES; k++) {
		if (fvector[k] != 0.0) {
		    x[n].index = k + 1;
		    x[n].value = fvector[k];
		    n++;
		}
	    }
	    x[n].index = -1;
	    label = (int)svm_predict(model,x);
	    if (label == get_label(org, dec, i, j, num_class, th_list)) {
		success++;
	    }
	    printf("%d %d\n", label, get_label(org, dec, i, j, num_class, th_list));
	    cls->val[i][j] = label;
	    offset[label] += org->val[i][j] - dec->val[i][j];
	    cls_hist[label]++;
	}
	fprintf(stderr, ".");
    }
    fprintf(stderr, "\n");
    printf("Accuracy = %.2f (%%)\n", 100.0 * success / (dec->width * dec->height));
    for (k = 0; k < num_class; k++) {
	offset[k] /= cls_hist[k];
	printf("Offset[%d] = %.2f\n", k, offset[k]);
    }
    for (i = 0; i < dec->height; i++) {
	for (j = 0; j < dec->width; j++) {
	    label = cls->val[i][j];
	    k = dec->val[i][j] + floor(offset[label] + 0.5);
	    if (k < 0) k = 0;
	    if (k > 255) k = 255;
	    dec->val[i][j] = k;
	}
    }
    printf("PSNR = %.3f (dB)\n", sn_after = calc_snr(org, dec));
    printf("GAIN = %+.3f (dB)", sn_after - sn_before);
    write_pgm(dec, modimg);
    svm_free_and_destroy_model(&model);
    free(x);
    return (0);
}
